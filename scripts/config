#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

app=$YNH_APP_INSTANCE_NAME

final_path=$(ynh_app_setting_get $app final_path)
#=================================================
# SPECIFIC CODE
#=================================================
# DECLARE GENERIC FUNCTION
#=================================================

ynh_panel_get_settings_from_sources() {
    declare -A old=()
    declare -A changed=()
    declare -A file_hash=()
    
    # From settings
    local params_sources
    params_sources=`python << EOL
import toml
from collections import OrderedDict
with open("/etc/yunohost/apps/vpnclient/config_panel.toml", "r") as f:
    file_content = f.read()
loaded_toml = toml.loads(file_content, _dict=OrderedDict)

for panel_name,panel in loaded_toml.items():
    if isinstance(panel, dict):
        for section_name, section in panel.items():
            if isinstance(section, dict):
                for name, param in section.items():
                    if isinstance(param, dict) and param.get('source', '') == 'settings':
                        print("%s.%s.%s=%s" %(panel_name, section_name, name, param.get('source', 'config_script')))
EOL
`
    for param_source in params_sources
    do
        local setting
        local source
        setting=$(echo "$param_source" | cut -d= -f1 | cut -d. -f3)
        _source=$(echo "$param_source" | cut -d= -f2)
        form_setting=$(echo "$param_source" | cut -d= -f1 | sed "s/\./_/g")
        form_setting="YNH_CONFIG_${form_setting^^}"
        changed[$setting]=false

        # Manage source=settings
        if [[ "$_source" == "settings" ]]
        then
            old[$setting]=$(ynh_app_setting_get $app $setting)
            if [[ "${!form_setting}" != "${old[$setting]}" ]]
            then
                changed[$setting]=true
            fi
        
        # Manage source=<FILE_PATH>
        elif [[ "$_source" != "config_script" ]]
            old[$setting]="$_source"
            if [[ "${old[setting]}" != "${!form_setting}" ]]
                file_hash[$setting]=$(sha256sum "$_source" | cut -d' ' -f1)
                file_hash[$form_setting]=$(sha256sum "${!form_setting}" | cut -d' ' -f1)
                if [[ "${file_hash[$setting]}" != "${file_hash[$form_setting]}" ]]
                then
                    changed[$setting]=true
                fi
            fi
        fi

    done
    
    
}

ynh_panel_set_settings_into_sources() {
}


#=================================================
# LOAD VALUES
#=================================================

# Load the real value from the app config or elsewhere.
# Then get the value from the form.
# If the form has a value for a variable, take the value from the form,
# Otherwise, keep the value from the app config.

old[vpn_host]="$(ynh_app_setting_get $app server_name)"
vpn_host="${YNH_CONFIG_MAIN_VPN_HOST:-$old_vpn_host}"

ynh_panel_get_settings_from_sources

# Override settings values with cube file values
if [[ "$cube_file" ]]
then
    declare -A settings
    settings[server_name]=""
    settings[server_port]=""
    settings[server_proto]=""
    settings[login_user]=""
    settings[login_passphrase]=""
    settings[dns0]=""
    settings[dns1]=""
    settings[crt_server_ca]="file"
    settings[crt_client]="file"
    settings[crt_client_key]="file"
    settings[crt_client_ta]="file"

    tmp_dir=$(dirname "$cube_file")
    for setting_name in "${!settings[@]}"
    do
        setting_value="$(jq --raw-output '.$setting_name' '$cube_file')"
        if [[ "$setting_value" == "null" ]]
        then
            setting_value=''
        # Save file in tmp dir
        elif [[ "${settings[$setting_name]}" == "file" ]]
        then
            echo "${settings[$setting_name]}" | sed s/|/\n/g > $tmp_dir/$setting_name
            setting_value="$tmp_dir/$setting_name"
        fi

        # Change settings value and changed status if needed
        if [[ "$setting_value" != "${!setting}" ]]
            declare "$setting='$setting_value'"
            changed[$setting]=false
            if [[ "$setting_value" != "${old[$setting]}" ]]
            then
                changed[$setting]=true
            fi
        fi
    done
    
    # Build specific OVPN template
    cp -f /etc/openvpn/client.conf.tpl.restore $tmp_dir/client.conf.tpl
    # Remove some lines
    for rm_regex in "$(jq --raw-output '.openvpn_rm[]' '$cube_file')"
    do
        sed -i "/$rm_regex/di" $tmp_dir/client.conf.tpl
    done

    # Add some other lines
    echo "# Custom" >> $tmp_dir/client.conf.tpl
    jq --raw-output ".openvpn_add[]" "$cube_file" >> $tmp_dir/client.conf.tpl
fi


#=================================================
# SHOW_CONFIG FUNCTION FOR 'SHOW' COMMAND
#=================================================

show_config() {
	# here you are supposed to read some config file/database/other then print the values
	# ynh_return "YNH_CONFIG_${PANEL_ID}_${SECTION_ID}_${OPTION_ID}=value"
    
    ynh_panel_return
    
    status="not running"
    if ip link show tun0
    then
        status="running"
    fi
    ynh_extra_return "main.service.status=$status"
}

#=================================================
# VALIDATE FORMS
#=================================================
validate() {
    is_changed=false
    for changed_status in "${!changed[@]}"
    do
        if [[ "$changed_status" == "true" ]]
        then
            is_changed=true
        fi
    done

    if [[ "$is_changed" == "true" ]]
    then
        'Nothing has been changed in this config'
    fi

    if [ "$dns0" =~ "^([0-9]+$" ] #TODO
    then
        'The DNS should be correct IP'
    fi
    
    if [[ -n "$login_user$login_passphrase" && ( -z "$login_user" || -z "$login_passphrase" ) ]]
    then
        'A Password is needed when you suggest a Username, or vice versa'
    fi

    if [[ -n "$crt$key" && ( -z "$crt" || -z "$key" ) ]]
    then
        A Client Certificate is needed when you suggest a Key, or vice versa
    fi

    if [[ -z "$login_user$login_passphrase" && -f "$crt" ]]
        You need either a Client Certificate, either a Username, or both
    fi

    $ipv6_expanded=$(ipv6_expanded "$server_ip6")
    if [[ -z "$ipv6_expanded" ]]
    then 
        'The IPv6 Delegated Prefix format looks bad'
    fi

            $ip6_blocs = explode(':', $ip6_net);
        $ip6_addr = "${ip6_blocs[0]}:${ip6_blocs[1]}:${ip6_blocs[2]}:${ip6_blocs[3]}:${ip6_blocs[4]}:${ip6_blocs[5]}:${ip6_blocs[6]}:42";

        $ip6_net = ipv6_compressed($ip6_net);
        $ip6_addr = ipv6_compressed($ip6_addr);
}

#=================================================
# MODIFY THE CONFIGURATION
#=================================================

apply_config() {
    validate
    
    # Stop vpn client
    touch /tmp/.ynh-vpnclient-stopped
    systemctl stop ynh-vpnclient

    if [ -f "$cube_file" ]
    then
        cp -f $tmp_dir/client.conf.tpl /etc/openvpn/client.conf.tpl
    fi

    if [ -z "$login_user" ]
    then 
        echo "$login_user\n$login_passphrase" > /etc/openvpn/keys/credentials
    else
        echo "" > /etc/openvpn/keys/credentials
    fi

    ynh_panel_set_settings_into_sources

    # Start vpn client
    systemctl start ynh-vpnclient
    rm -f /tmp/.ynh-vpnclient-stopped


}

#=================================================
# GENERIC FINALIZATION
#=================================================
# SELECT THE ACTION FOLLOWING THE GIVEN ARGUMENT
#=================================================

case $1 in
  show) show_config;;
  apply) apply_config;;
esac
